package testbench.client.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import testbench.bootloader.service.StaticHolder;

import javax.swing.*;
import java.awt.*;

/**
 * Created by Sven Riedel on 14.12.2015
 */
public class ProgressBarWindow extends JFrame {
    private JPanel formPanel;
    private JProgressBar progressBar;
    private JLabel downloadLabel;
    private JPanel cardPanel;
    private JPanel downloadPanel;
    private JPanel initPanel;
    private JPanel donePanel;
    private JPanel uploadPanel;
    private JLabel uploadLabel;
    private JLabel doneLabel;

    private CardLayout cl;
    private boolean isDownload;

    public ProgressBarWindow(boolean isDownload) {
        setContentPane(formPanel);
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Fortschritt");
        pack();
        initGuiProperties(350, 150);

        cl = (CardLayout) cardPanel.getLayout();

        this.isDownload = isDownload;

        cl.show(cardPanel, "initCard");

        if (isDownload)
            downloadLabel.setText("Herunterladen..." + " (" + StaticHolder.currentTransferSizeByte / 1000 + " KB)");
        else uploadLabel.setText("Hochladen..." + " (" + StaticHolder.currentTransferSizeByte / 1000 + " KB)");
    }

    /**
     * Diese Methode setzt den Fortschritt der JProgressBar.
     * <p/>
     * Wenn der Boolean-Wert isDownload false ist:
     * Die JProgressBar wird nicht angezeigt (Upload zeigt keine Bar an)
     * <p/>
     * Sonst:
     * Ist der Fortschritt groeßer als 0, so wird die JProgressBar angezeigt.
     * Ist der Fortschritt Groeßer oder gleich 100, so verschwindet die JProgressBar.
     *
     * @param value Fortschritt
     */
    public void setProgressBar(int value) {
        progressBar.setValue(value);
        progressBar.setString(String.valueOf(value) + "%");
        if (value > 0) {
            if (isDownload) cl.show(cardPanel, "downloadCard");
            else cl.show(cardPanel, "uploadCard");
        }
        if (value >= 100) {
            if (!isDownload) doneLabel.setText("Server empfängt und verarbeitet Daten...");
            cl.show(cardPanel, "doneCard");
        }
    }

    /**
     * Hier werden einige allgemeine GUI Einstellungen festgelegt.
     *
     * @param guiSizeX Breite des GUI-Fensters.
     * @param guiSizeY Hoehe des GUI-Fensters.
     */
    private void initGuiProperties(int guiSizeX, int guiSizeY) {
        Dimension d = new Dimension();
        d.setSize(guiSizeX, guiSizeY);
        setMinimumSize(d);
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        formPanel = new JPanel();
        formPanel.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        formPanel.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(5, -1), new Dimension(5, -1), 0, false));
        final Spacer spacer2 = new Spacer();
        formPanel.add(spacer2, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(5, -1), new Dimension(5, -1), 0, false));
        final Spacer spacer3 = new Spacer();
        formPanel.add(spacer3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 5), new Dimension(-1, 5), new Dimension(-1, 5), 0, false));
        final Spacer spacer4 = new Spacer();
        formPanel.add(spacer4, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 5), new Dimension(-1, 5), new Dimension(-1, 5), 0, false));
        cardPanel = new JPanel();
        cardPanel.setLayout(new CardLayout(0, 0));
        formPanel.add(cardPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        cardPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
        downloadPanel = new JPanel();
        downloadPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        cardPanel.add(downloadPanel, "downloadCard");
        downloadLabel = new JLabel();
        downloadLabel.setFont(new Font(downloadLabel.getFont().getName(), downloadLabel.getFont().getStyle(), 14));
        downloadLabel.setText("Herunterladen...");
        downloadPanel.add(downloadLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressBar = new JProgressBar();
        progressBar.setEnabled(false);
        progressBar.setFont(new Font(progressBar.getFont().getName(), progressBar.getFont().getStyle(), 14));
        progressBar.setIndeterminate(false);
        progressBar.setString("0%");
        progressBar.setStringPainted(true);
        progressBar.setVisible(true);
        downloadPanel.add(progressBar, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 30), new Dimension(-1, 30), null, 0, false));
        final Spacer spacer5 = new Spacer();
        downloadPanel.add(spacer5, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(5, -1), new Dimension(5, -1), 0, false));
        final Spacer spacer6 = new Spacer();
        downloadPanel.add(spacer6, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(5, -1), new Dimension(5, -1), 0, false));
        initPanel = new JPanel();
        initPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        cardPanel.add(initPanel, "initCard");
        final JLabel label1 = new JLabel();
        label1.setFont(new Font(label1.getFont().getName(), label1.getFont().getStyle(), 14));
        label1.setText("Übertragung wird vorbereitet...");
        initPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        donePanel = new JPanel();
        donePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        cardPanel.add(donePanel, "doneCard");
        doneLabel = new JLabel();
        doneLabel.setFont(new Font(doneLabel.getFont().getName(), doneLabel.getFont().getStyle(), 14));
        doneLabel.setText("Übertragung wird verarbeitet...");
        donePanel.add(doneLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        uploadPanel = new JPanel();
        uploadPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        cardPanel.add(uploadPanel, "uploadCard");
        uploadLabel = new JLabel();
        uploadLabel.setFont(new Font(uploadLabel.getFont().getName(), uploadLabel.getFont().getStyle(), 14));
        uploadLabel.setText("Hochladen...");
        uploadPanel.add(uploadLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return formPanel;
    }
}
