package testbench.client.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import testbench.bootloader.grenz.MassenDef;
import testbench.bootloader.grenz.MassenInfoGrenz;
import testbench.bootloader.grenz.MassendatenGrenz;
import testbench.bootloader.grenz.MessdatenGrenz;

import javax.swing.*;
import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;

/**
 * Created by Sven Riedel on 11.01.2016
 */
public class MessGraph extends JFrame {
    private JPanel mainPanel;
    private JPanel chartPanel;
    private ChartPanel CP;
    private ArrayList<MessdatenGrenz> messdatenGrenzArrayList;

    public MessGraph(ArrayList<MessdatenGrenz> messdatenGrenzArrayList) {
        this.messdatenGrenzArrayList = messdatenGrenzArrayList;
        initGuiProperties(600, 600);
        drawChart();
    }

    private void drawChart() {
        XYSeries signal = new XYSeries("Signal");
        XYSeriesCollection dataset = new XYSeriesCollection();
        XYSplineRenderer xySplineRenderer = new XYSplineRenderer();
        XYPlot plot;
        JFreeChart chart;
        NumberAxis xAxis;
        NumberAxis yAxis;

        for (MessdatenGrenz m : messdatenGrenzArrayList) {
            signal.add(m.getSerializedSize(), m.getGesamtZeit());
        }
        dataset.addSeries(signal);

        xySplineRenderer.setSeriesPaint(0, Color.blue);
        xySplineRenderer.setSeriesShape(0, new Ellipse2D.Double(-2, -2, 4, 4)); //größe der punkte bei XYSplineRenderer
        xAxis = new NumberAxis("x - Dateigröße");
        yAxis = new NumberAxis("y - Gesamtzeit");

        plot = new XYPlot(dataset, xAxis, yAxis, xySplineRenderer);
        chart = new JFreeChart(plot);
        chart.setTitle("Messdaten");

        if (CP == null) {
            CP = new ChartPanel(chart);
            chartPanel.setLayout(new BorderLayout());
            chartPanel.add(CP, BorderLayout.CENTER);
        } else CP.setChart(chart);

        chartPanel.validate();
    }

    private void initGuiProperties(int guiSizeX, int guiSizeY) {
        Dimension d = new Dimension();
        d.setSize(guiSizeX, guiSizeY);
        setMinimumSize(d);
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        chartPanel = new JPanel();
        chartPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(chartPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
