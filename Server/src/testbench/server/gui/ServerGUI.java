package testbench.server.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import testbench.bootloader.Printer;
import testbench.datenverwaltung.dateiverwaltung.impl.IActivateComponentImpl;
import testbench.server.SessionHandler;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.PrintStream;

/**
 * Created by Huskey on 08.12.2015.
 */
public class ServerGUI extends JFrame {
    private JTextArea consoleOut;
    private JPanel panel;
    private JButton clearButton;
    private JButton startServerButton;
    private JButton konfigurierenButton;
    private JButton datenverwaltungStartenButton;
    private boolean started = false;
    private SessionHandler sh;
    private JFrame frame;

    public ServerGUI() throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException {
        final KonsoleOutputStream tAOS = new KonsoleOutputStream(consoleOut, 34);
        PrintStream con = new PrintStream(tAOS);
        System.setOut(con);
        System.setErr(con);
        sh = new SessionHandler();
        setContentPane(panel);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        pack();
        frame = this;
        Printer.printWelcome();

        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tAOS.clear();
                Printer.printWelcome();

            }
        });
        startServerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!started) {
                    if (!sh.isRunning()) {
                        if (sh.startServer()) {
                            startServerButton.setText("Stop Server");
                            started = true;
                        }

                    }
                } else {
                    if (sh.isRunning()) {
                        sh.stopServer();
                        startServerButton.setText("Start Server");
                        started = false;
                    }
                }
            }
        });
        konfigurierenButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int port = 0;
                boolean ok = false;

                do {
                    String s = (String) JOptionPane.showInputDialog(frame,
                            "Bitten geben Sie den gewünschten Port ein",
                            "Port-Konfiguration",
                            JOptionPane.PLAIN_MESSAGE,
                            null, null, null);
                    if (s == null) return;
                    try {
                        port = Integer.parseInt(s);
                    } catch (Exception exc) {
                        Printer.println("Bitte geben Sie eine Zahl ein...");
                    }

                    if (port > 0) {
                        sh.setPort(port);
                        ok = true;
                        if (sh.isRunning())
                            Printer.println("Port wurde auf " + port + " gesetzt. \nZum Übernehmen der Änderung muss der Server neugestartet werden");
                        else
                            Printer.println("Port wurde auf " + port + " gesetzt. \nSie können den Server jetzt mit der neuen Konfiguration starten");
                        return;
                    }

                } while (ok == false);
            }
        });
        datenverwaltungStartenButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IActivateComponentImpl datenverwaltung = new IActivateComponentImpl();
                datenverwaltung.startComponent();
                datenverwaltung.getComponentGui().setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 5, new Insets(2, 2, 0, 0), -1, -1));
        panel.setAutoscrolls(true);
        panel.setBackground(new Color(-3487030));
        panel.setMaximumSize(new Dimension(655, 500));
        panel.setMinimumSize(new Dimension(655, 500));
        panel.setPreferredSize(new Dimension(655, 500));
        panel.setBorder(BorderFactory.createTitledBorder("Server-Log"));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-16777216));
        panel.add(panel1, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        consoleOut = new JTextArea();
        consoleOut.setAutoscrolls(false);
        consoleOut.setBackground(new Color(-16777216));
        consoleOut.setEditable(false);
        consoleOut.setFont(new Font("Lucida Console", consoleOut.getFont().getStyle(), 12));
        consoleOut.setForeground(new Color(-3487030));
        consoleOut.setLineWrap(true);
        consoleOut.setMargin(new Insets(0, 0, 0, 0));
        consoleOut.setText("");
        panel1.add(consoleOut, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        clearButton = new JButton();
        clearButton.setAlignmentX(0.0f);
        clearButton.setHorizontalAlignment(0);
        clearButton.setText("Clear");
        clearButton.setVerticalAlignment(0);
        panel.add(clearButton, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        startServerButton = new JButton();
        startServerButton.setText("Start Server");
        panel.add(startServerButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        konfigurierenButton = new JButton();
        konfigurierenButton.setText("Konfigurieren");
        panel.add(konfigurierenButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        datenverwaltungStartenButton = new JButton();
        datenverwaltungStartenButton.setText("Datenverwaltung starten");
        panel.add(datenverwaltungStartenButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
